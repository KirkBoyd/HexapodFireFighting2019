///**nav**/
//  else if(s1()>= sharp1a){//if it is closer than sharp1a turn right
//    turnR();
//  }
//  else if(s2()>= sharp2a){//if it is closer than sharp2a turn left
//    turnL();
//  }
//  else if(s1()> sharp1c){//if it is kind of close shimmy right
//    strafe60();
//  }
//  else if(s2()>sharp2a){//if it is kind of close shimmy left
//    strafe330();
//  }
//  else if(s4()<sharp4nothingThereLo){//if there is nothing close on left, turn towards opening
//   buzz();
//   backHome();
//   diagLfwd();
//   diagLfwd();
//   diagLfwd();
//   diagLfwd();
//   diagLfwd();
//   diagLfwd();
//   diagLfwd();
//  }
////  else if(s4()>sharp4nothingThereLo &&s4()<sharp4nothingThereHi && !didThatOneTurn){
////    digitalWrite(soundLEDport, HIGH);
////    digitalWrite(flameLEDport, HIGH);
////    digitalWrite(runningLEDport, HIGH);
////    fwd();
////    fwd();
////    fwd();
////    fwd();
////    fwd();
////    fwd();
////    turn90L();
////    fwd();
////    fwd();
////    fwd();
////    fwd();
////    fwd();
////    fwd();
////    fwd();
////    fwd();
////    fwd();
////    fwd();
////    fwd();
////    fwd();
////    fwd();
////    turn90L();
////    fwd();
////    fwd();
////    fwd();
////    fwd();
////    fwd();
////    fwd();
////    fwd();
////    fwd();
////    fwd();
////    digitalWrite(soundLEDport, LOW);
////    didThatOneTurn = true;
////  }
//  else{fwd();}//if none of the sensors read too close, go straight fwd
//}
  //delay(1000);//if button was pressed again wait to release it so the loop exits
//  if(startButton()){
//    pwrLED(false);
//    delay(500);
//    pwrLED(true);
//    while(!startButton()){
//      /****TEST CODE ACTIVATED BY START BUTTON BELOW****/
//      buzz();
//    }
//    while(startButton()){delay(500);}
//  }//end if(startButton)()){
/*********UVTRON*****************/
//  flameSum += analogRead(0);
//  timeNow = millis();
//  timeDiff = timeNow - timeBefore;
////  Serial.print("timeDiff = ");
////  Serial.println(timeDiff);
////  Serial.print("flameSum = ");
////  Serial.println(flameSum);
//  if(timeDiff >= interval){
//    timeBefore = timeNow;
////    timeNow = millis();
//    if(flameSum>=3000){
//      Serial.println("Flame Detected");
//      Serial.print("flameSum = ");
//      Serial.println(flameSum);
//      //delay(1000);
//    }
//
//    flameSum = 0;
//  }
/*********************/
void turn90R(){//make small steps in place in circle to turn RIGHT
  //for(int i=0;i++;i<2){
    evensUp();//femurs up
    evensSameSlow();//
    delay(tim);
    evensDown();//femurs down
    delay(tim);
    oddsUp();
    evensSameRevSlow();//with contact, move to pull itself
    oddsSameSlow();
    delay(tim);
    oddsDown();
    delay(tim);
    oddsSameRevSlow();
    delay(tim);
    stand(tim);//straighten legs back
  //}
}
void evensSameSlow(){
  SetPosition(CMR,fullTrig(stepLg));
  SetPosition(CRL,fullTrig(stepLg));
  SetPosition(CFL,fullTrig(stepLg));
}
void evensSameRevSlow(){
  SetPosition(CMR,fullTrig(-stepLg));
  SetPosition(CRL,fullTrig(-stepLg));
  SetPosition(CFL,fullTrig(-stepLg));
}
void oddsSameSlow(){
  SetPosition(CML,fullTrig(stepLg));
  SetPosition(CRR,fullTrig(stepLg));
  SetPosition(CFR,fullTrig(stepLg));
}
void oddsSameRevSlow(){
  SetPosition(CML,fullTrig(-stepLg));
  SetPosition(CRR,fullTrig(-stepLg));
  SetPosition(CFR,fullTrig(-stepLg));
}

/* Main walk (add back later after testing new trig and such if desired) */
//    walkStance(1000);
//    walkA(500);
//    delay(1000);
//    while(!startButton()){
//      walkB(500);
//      walkC(500);
//      walkD(500);
//      walkE(500);
//    }


/*moved out 03/27/19
//    alpha = toRad(3);
//    getBeta(alpha);
//    getPhi(beta);
//    toDynum(toDeg(phi));
//    printAngles();
//    Serial.print("FINAL ANSWER: ");
//    Serial.println(fullTrig(3));
    //phi = getPhi(beta);
    //Serial.println(toDeg(phi));




/*OLD
void axGo(int id, int pos)    //sets motor at given ID to given position then stalls until it gets there
  {
  while(GetPosition(id) != pos){};
}
void triadGo(int a, int posA, int b, int posB, int c, int posC)  //same as axGo, but takes three motor ID's and Positions at a time and stalls after all three are called
{
  SetPosition(a,posA);
  SetPosition(b,posB);
  SetPosition(c,posC);
  while(GetPosition(a) != posA){};
  while(GetPosition(b) != posB){};
  while(GetPosition(c) != posC){};
}
void triadGo(int a, int posA, int b, int posB, int c, int posC, int d, int posD, int e, int posE, int f, int posF)//axGo for 6 motors
{
  SetPosition(a,posA);
  SetPosition(b,posB);
  SetPosition(c,posC);
  SetPosition(d,posD);
  SetPosition(e,posE);
  SetPosition(f,posF);
  while(GetPosition(a) != posA){};
  while(GetPosition(b) != posB){};
  while(GetPosition(c) != posC){};
  while(GetPosition(d) != posD){};
  while(GetPosition(e) != posE){};
  while(GetPosition(f) != posF){};
}
*/
